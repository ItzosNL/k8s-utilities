/// Create Monitoring namespace
Class ITZOS.K8S.InstallMonitoring
{

Parameter Namespace As String = "MONITORING";

/// Create namespace and Load Package, and finish installation
ClassMethod Install(namespace As %String = {..#Namespace})
{
	set sc = $$$OK

	if '##class(ITZOS.K8S.Utilities.Namespace).NamespaceExists(namespace)
	{
		write "Creating namespace '",namespace,": ",!
		set vars("Namespace") = namespace
		set sc = ..setup(.vars)

		if $$$ISERR(sc)
		{
			write "Setup failed: ",$SYSTEM.Status.GetErrorText(sc),!
			return
		}
	}
	else
	{
		write "Namespace '",namespace,"' already exists!",!
	}

	new $NAMESPACE
	set $NAMESPACE = namespace

	write "Loading intersystems-monitoring package:",!

	// This installs the intersystems-monitoring package
	ZPM "install intersystems-monitoring"

    write "Finish setting up MONITORING namespace: ",!
	do ##class(IRISELK.Setup.installer).PostInstall()
}

/// Manifest Definition for Monitoring namespace
XData Manifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
	<Log Text="Creating Iris namespace ${Namespace}" Level="0"/>
	<Namespace Name="${Namespace}" Create="yes" Code="${Namespace}_CODE" Data="${Namespace}_DATA" Ensemble="1">
		<Configuration>
			<Database Name="${Namespace}_DATA" Dir="${MGRDIR}${Namespace}_DATA" Create="yes" Resource="%DB_${Namespace}"/>
			<Database Name="${Namespace}_CODE" Dir="${MGRDIR}${Namespace}_CODE" Create="yes" Resource="%DB_${Namespace}"/>
		</Configuration>
	</Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
 #; Let our XGL document generate code for this method.
 return ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Manifest")
}

}

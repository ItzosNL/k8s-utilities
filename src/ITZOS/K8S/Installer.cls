Include %occInclude

/// Itzos Installer
Class ITZOS.K8S.Installer
{

/// Installation - preparation
/// - Creates namespace
/// - Loads SSLConfig Default
/// - Loads ZPM
ClassMethod Prepare(namespace As %String)
{
	// execute first steps in User namespace
	set vars("Namespace") = namespace
	set sc = ..setup(.vars)

	if $$$ISERR(sc)
	{
		write "Setup failed: ",$SYSTEM.Status.GetErrorText(sc),!
		return
	}

	write "Creating SSL Config 'default': ",!
	do ##class(ITZOS.K8S.Utilities.SSLConfigs).CreateSSLConfig("Default")

	write "Loading ZPM: ",!
	do ##class(ITZOS.K8S.Utilities.ZPM).Load()
}

/// Installation - Finish in target namespace
/// - Loads source package and compiles all classes
/// - Autostarts production
ClassMethod Finish(packageNames As %String, productionName As %String = "")
{
	for index = 1:1:$LENGTH(packageNames, ",")
	{
		set packageName = $PIECE(packageNames, ",", index)
		write "Importing ",packageName," into namespace ",$NAMESPACE,!

		set sc = $System.OBJ.ImportDir("/tmp/src/" _ packageName, "*", "ck-d", , 1)    

		if $$$ISERR(sc)
		{
			write "Loading package '",packageName,"' failed: ",$SYSTEM.Status.GetErrorText(sc),!
		}
	}
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
 #; Let our XGL document generate code for this method.
 return ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Manifest")
}

/// Manifest Definition.
XData Manifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
	<Log Text="check if namespace ${Namespace} exists, if not create it" Level="0"/>
	<If Condition='(##class(Config.Namespaces).Exists("${Namespace}")=0)'>
		<Log Text="Creating Iris namespace ${Namespace} with separate Code and Data files" Level="0"/>
		<Namespace Name="${Namespace}" Create="yes" Code="${Namespace}_CODE" Data="${Namespace}_DATA" Ensemble="1">
			<Configuration>
				<Database Name="${Namespace}_CODE" Dir="${MGRDIR}${Namespace}_CODE" Create="yes" Resource="%DB_${Namespace}"/>
				<Database Name="${Namespace}_DATA" Dir="${MGRDIR}${Namespace}_DATA" Create="yes" Resource="%DB_${Namespace}"/>
				<ClassMapping Package="HS" From="HSLIB"/>
				<ClassMapping Package="HSMOD" From="HSLIB"/>
				<ClassMapping Package="ITZOS" From="USER"/><!-- for installer-->
			</Configuration>

			<Invoke Class="%ZHSLIB.HealthShareMgr" Method="EnableHealthShareNamespace" CheckStatus="true" >
				<Arg Value="${Namespace}"/>
				<Arg Value="0"/>
				<Arg Value="1"/>
				<Arg Value="1"/>
			</Invoke>
		</Namespace>
	</If>
</Manifest>
}

}

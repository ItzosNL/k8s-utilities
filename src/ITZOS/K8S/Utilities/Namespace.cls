Include %occErrors

/// Namespace Utilities
Class ITZOS.K8S.Utilities.Namespace
{

/// Node from the after-install.config processed by this class.
Parameter AfterInstallNode = "namespace";

/// Please ignore and log no warning
Parameter AfterInstallMode = "display-only";

/// Display the value found
ClassMethod Display(value As %String) As %Status
{
	if value '= $NAMESPACE
	{
	    write "Namespace mismatch: configured=",value," but running in ",$NAMESPACE,!
	}
}
/// Does namespace exist?
ClassMethod NamespaceExists(namespace As %String) As %Boolean
{
	new $NAMESPACE
	set $NAMESPACE = "%SYS"

	return ##class(Config.Namespaces).Exists(namespace)
}

/// Create namespace
ClassMethod Create(namespace As %String) As %Status
{
	set sc = $$$OK

	if '..NamespaceExists(namespace)
	{
		write "Creating namespace '",namespace,": ",!
		set vars("Namespace") = namespace
		set sc = ..setup(.vars)

		if $$$ISERR(sc)
		{
			write "Setup failed: ",$SYSTEM.Status.GetErrorText(sc),!
			return sc
		}
	}
	else
	{
		write "Namespace '",namespace,"' already exists!",!
	}

	return sc
}

/// Create %All Namespace for package mappings if it doesn't exist
ClassMethod CreateALLNamespace()
{
	New $NAMESPACE
	Set $NAMESPACE = "%SYS"

	if '##class(Config.Namespaces).Exists("%All")
	{
		set properties("Globals") = "%DEFAULTDB"
		set sc = ##class(Config.Namespaces).Create("%All", .properties)

		if $$$ISERR(sc)
		{
			w "Error while creatin %All Namespace: "
			Do $System.Status.DisplayError(sc)
		}
		else
		{
			w "%ALL namespace created!",!
		}
	}
	else
	{
		w "%ALL namespace already exists",!
	}
}

/// Get CODE database for a namespace
ClassMethod GetCodeDatabaseForNamespace(namespace As %String = {$NAMESPACE}) As %String
{
	new $NAMESPACE
	set $NAMESPACE = "%SYS"

	$$$ThrowOnError(##class(Config.Namespaces).Get(namespace, .properties))

	return properties("Routines")
}

/// Create package mappings for package from current namespace to %All namespace
ClassMethod CreatePackageMappingToALL(packagename As %String)
{
	set database = ..GetCodeDatabaseForNamespace()

	new $NAMESPACE
	Set $NAMESPACE = "%SYS"

	if ##Class(Config.MapPackages).Exists("%All", packagename, .objref)
	{
		if (objref.Database = database)
		{
			write "Mapping for package " _ packagename _ " from DB " _ objref.Database _ " already exists in %All Namespace",!
			return
		}

		set sc = ##Class(Config.MapPackages).Delete("%All", packagename)

		if $$$ISERR(sc)
		{
			write "Error while deleting exting Mapping for package " _ packagename _ " to %All Namespace: ",!
			do $System.Status.DisplayError(sc)
		}
		else
		{
			write "Deleted existing Mapping for package " _ packagename _ "from DB " _ objref.Database _ " in %All Namespace",!
		}
	}

	set props("Database") = database // Will need to be made more flexible...
	set sc = ##Class(Config.MapPackages).Create("%All", packagename, .props)

	if $$$ISERR(sc)
	{
		if ($System.Status.GetErrorCodes(sc) = $$$CPFMapAlreadyExists)
		{
			write "Mapping for package " _ packagename _ " already exists in %All Namespace",!
		}
		else
		{
			write "Error while creating Mapping for package " _ packagename _ " to %All Namespace: "
			do $System.Status.DisplayError(sc)
			write !
		}
	}
	else
	{
		write "Created Mapping for package " _ packagename _  " from DB " _ database _ " to %All Namespace",!
	}
}

/// Manifest Definition for Monitoring namespace
XData Manifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
	<Log Text="Creating Iris namespace ${Namespace}" Level="0"/>
	<Namespace Name="${Namespace}" Create="yes" Code="${Namespace}_CODE" Data="${Namespace}_DATA" Ensemble="1">
		<Configuration>
			<Database Name="${Namespace}_DATA" Dir="${MGRDIR}${Namespace}_DATA" Create="yes" Resource="%DB_${Namespace}"/>
			<Database Name="${Namespace}_CODE" Dir="${MGRDIR}${Namespace}_CODE" Create="yes" Resource="%DB_${Namespace}"/>
		</Configuration>
	</Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
 #; Let our XGL document generate code for this method.
 return ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Manifest")
}

}
